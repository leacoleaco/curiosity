package pro.leaco.curiosity.db.g.service;

import java.util.ArrayList;
import java.util.List;

public class GDataDtoExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected List<Object> joinCriteria;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected String joinClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected String groupByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected Integer offset;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected Integer rows;

    public int page = 1;

    public int pageSize = 10;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample() {
        oredCriteria = new ArrayList<>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample orderBy(String orderByClause) {
        this.setOrderByClause(orderByClause);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample orderBy(String ... orderByClauses) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < orderByClauses.length; i++) {
            sb.append(orderByClauses[i]);
            if (i < orderByClauses.length - 1) {
                sb.append(" , ");
            }
        }
        this.setOrderByClause(sb.toString());
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria(this);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
        rows = null;
        offset = null;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample andCriteria(Object criteria) {
        if(this.joinCriteria == null){
            this.joinCriteria = new java.util.ArrayList<>();
        }
        this.joinCriteria.add(criteria);
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public List<Object> getJoinCriteria() {
        return this.joinCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public String getJoinClause() {
        return joinClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample innerJoin(String table, String ... on) {
        StringBuffer sb = new StringBuffer();
        sb.append("INNER JOIN ");
        sb.append(table);
        sb.append(" ON ");
        for (int i = 0; i < on.length; i++) {
            sb.append(on[i]);
            if (i < on.length - 1) {
                sb.append(" AND ");
            }
        }
        this.joinClause = sb.toString();
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample leftJoin(String table, String ... on) {
        StringBuffer sb = new StringBuffer();
        sb.append("LEFT JOIN ");
        sb.append(table);
        sb.append(" ON ");
        for (int i = 0; i < on.length; i++) {
            sb.append(on[i]);
            if (i < on.length - 1) {
                sb.append(" AND ");
            }
        }
        this.joinClause = sb.toString();
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample rightJoin(String table, String ... on) {
        StringBuffer sb = new StringBuffer();
        sb.append("RIGHT JOIN ");
        sb.append(table);
        sb.append(" ON ");
        for (int i = 0; i < on.length; i++) {
            sb.append(on[i]);
            if (i < on.length - 1) {
                sb.append(" AND ");
            }
        }
        this.joinClause = sb.toString();
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public String getGroupByClause() {
        return groupByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample groupBy(String groupByClause) {
        this.groupByClause = groupByClause;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample groupBy(String ... groupByClause) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < groupByClause.length; i++) {
            sb.append(groupByClause[i]);
            if (i < groupByClause.length - 1) {
                sb.append(" , ");
            }
        }
        this.groupByClause = sb.toString();
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public static Criteria newAndCreateCriteria() {
        GDataDtoExample example = new GDataDtoExample();
        return example.createCriteria();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample when(boolean condition, IExampleWhen then) {
        if (condition) {
            then.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample when(boolean condition, IExampleWhen then, IExampleWhen otherwise) {
        if (condition) {
            then.example(this);
        } else {
            otherwise.example(this);
        }
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public Integer getOffset() {
        return this.offset;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public void setRows(Integer rows) {
        this.rows = rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public Integer getRows() {
        return this.rows;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample limit(Integer rows) {
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample limit(Integer offset, Integer rows) {
        this.offset = offset;
        this.rows = rows;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public GDataDtoExample page(Integer page, Integer pageSize) {
        this.offset = (page - 1) * pageSize;
        this.rows = pageSize;
        return this;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public static Criteria build() {
        GDataDtoExample example = new GDataDtoExample();
        return example.createCriteria();
    }

    private void buildOrderBy(java.util.Set<java.util.Map.Entry<String, Object>> entries) {
        if (entries == null || entries.isEmpty()) {
            return;
        }
        java.lang.String[] orderByCause = entries.stream()
                .filter(x -> java.util.regex.Pattern.matches("o(a|d)_[$_a-zA-Z]+", x.getKey()))
                .sorted((x, y) -> compareValue(x.getValue(), y.getValue()))
                .map(entry -> {
                    String expression = entry.getKey();
                    String orderPrefix = expression.substring(1, 2);
                    String propName = SQLFilter.escape(expression.substring(3));
                    String columnName = parse(propName);
                    if (columnName == null) {
                        throw new java.lang.IllegalArgumentException("\"" + propName + "\" not exist");
                    }
                    switch (orderPrefix) {
                        case "a":
                            return columnName + " asc";
                        case "d":
                            return columnName + " desc";
                        default:
                            throw new java.lang.AssertionError();
                    }
                })
                .filter(java.util.Objects::nonNull)
                .toArray(java.lang.String[]::new);
        if (orderByCause.length > 0) {
            this.orderBy(orderByCause);
        }
    }

    private void buildWhere(Criteria urlCriteria, java.util.Set<java.util.Map.Entry<String, Object>> entries) {
        if (entries == null || entries.isEmpty()) {
            return;
        }
        for (java.util.Map.Entry<String, Object> entry : entries) {
            java.lang.String expression = entry.getKey();
            java.lang.String value = entry.getValue().toString();
            if (java.util.regex.Pattern.matches("w[a-z]{3}_[a-zA-Z$_]+", expression)) {
                buildWhereExpression(urlCriteria, expression, value);
            }
        }
    }

    private void buildWhereExpression(Criteria urlCriteria, String expression, Object value) {
        if (expression == null || "".equals(expression)) {
            return;
        }

        String compPrefix = expression.substring(2, 4);
        String propName = SQLFilter.escape(expression.substring(5));
        String columnName = parse(propName);
        if(columnName == null){
            throw new java.lang.IllegalArgumentException("\"" + propName + "\" not exist");
        }
        switch (compPrefix) {
            case "eq":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " =", value, propName);
                }
                break;
            case "ne":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " <>", value, propName);
                }
                break;
            case "gt":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " >", value, propName);
                }
                break;
            case "ge":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " >=", value, propName);
                }
                break;
            case "lt":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " <", value, propName);
                }
                break;
            case "le":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " <=", value, propName);
                }
                break;
            case "lk":
                if (value != null) {
                    urlCriteria.addCriterion(columnName + " like", "%" + value + "%", propName);
                }
                break;
            case "in":
                if (value instanceof String) {
                    String v = (String) value;
                    if (v != null && !"".equals(v)) {
                        String[] split = v.split(",");
                        if (split != null && split.length > 0) {
                            ArrayList<String> strings = new ArrayList<>();
                            for (String s : split) {
                                strings.add(s);
                            }
                            urlCriteria.addCriterion(columnName + " in", strings, propName);
                        }
                    }
                }
                break;
            case "ep":
                urlCriteria.addCriterion(columnName + " =", "", propName);
                break;
            case "np":
                urlCriteria.addCriterion(columnName + " <>", "", propName);
                break;
            case "eu":
                urlCriteria.addCriterion(columnName + " is null");
                break;
            case "nu":
                urlCriteria.addCriterion(columnName + " is not null");
                break;
            default:
                break;
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public final Criteria buildByUrlParams(java.util.Map<String, Object> params) {
        Criteria urlCriteria = this.createCriteria();
        if (params == null || params.isEmpty()) {
            return urlCriteria;
        }
        //校验url参数
        java.util.Set<java.util.Map.Entry<String, Object>> entries = params.entrySet();

        for (java.util.Map.Entry<String, Object> entry : entries) {
            String expression = entry.getKey();
            String value = entry.getValue().toString();

            //防止sql注入
            // 防止SQL注入（因为sidx、order是通过拼接SQL实现排序的，会有SQL注入风险）
            SQLFilter.sqlInject(expression);
            SQLFilter.sqlInject(value);
        }

        //构建page参数
        this.page = java.util.Optional.ofNullable(params.get("page")).map(Object::toString).map(Integer::valueOf).orElse(1);
        this.pageSize = java.util.Optional.ofNullable(java.util.Optional.ofNullable(params.get("limit")).orElse(params.get("pageSize"))).map(Object::toString).map(Integer::valueOf).orElse(10);

        //构建where
        buildWhere(urlCriteria, entries);
        // 构建 orderBy
        buildOrderBy(entries);

        return urlCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public static Criteria buildWithUrlParam(java.util.Map<String, Object> params) {
        GDataDtoExample example = new GDataDtoExample();
        return example.buildByUrlParams(params);
    }

    private static int compareValue(Object a, Object b) {
        if (a == null) {
            return -1;
        } else if (b == null) {
            return 1;
        } else {
            int _a;
            try {
                _a = Integer.parseInt(a.toString());
            } catch (Exception e) {
                return -1;
            }
            int _b;
            try {
                _b = Integer.parseInt(b.toString());
            } catch (Exception e) {
                return 1;
            }
            return Integer.compare(_a, _b);
        }
    }

    private static String parse(String column) {
        if (column != null) {
            for (GDataDto.Column value : GDataDto.Column.values()) {
                if (column.equals(value.getJavaProperty())){
                    return value.getValue();
                }
            }
        }
        return null;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria and(String ... sql) {
            String condition = "";
            for (String s : sql) {
                condition += s + " ";
            }
            addCriterion(condition);
            return (Criteria) this;
        }

        public Criteria andNotBetween(String exp, Object value1, Object value2) {
            addCriterion(exp + " not between" , value1, value2, exp );
            return (Criteria) this;
        }

        public Criteria andBetween(String exp, Object value1, Object value2) {
            addCriterion(exp + " between" , value1, value2, exp );
            return (Criteria) this;
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdEqualToColumn(GDataDto.Column column) {
            addCriterion("id = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualToColumn(GDataDto.Column column) {
            addCriterion("id <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanColumn(GDataDto.Column column) {
            addCriterion("id > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("id >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanColumn(GDataDto.Column column) {
            addCriterion("id < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("id <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andTitleIsNull() {
            addCriterion("title is null");
            return (Criteria) this;
        }

        public Criteria andTitleIsNotNull() {
            addCriterion("title is not null");
            return (Criteria) this;
        }

        public Criteria andTitleEqualTo(String value) {
            addCriterion("title =", value, "title");
            return (Criteria) this;
        }

        public Criteria andTitleEqualToColumn(GDataDto.Column column) {
            addCriterion("title = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTitleNotEqualTo(String value) {
            addCriterion("title <>", value, "title");
            return (Criteria) this;
        }

        public Criteria andTitleNotEqualToColumn(GDataDto.Column column) {
            addCriterion("title <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTitleGreaterThan(String value) {
            addCriterion("title >", value, "title");
            return (Criteria) this;
        }

        public Criteria andTitleGreaterThanColumn(GDataDto.Column column) {
            addCriterion("title > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTitleGreaterThanOrEqualTo(String value) {
            addCriterion("title >=", value, "title");
            return (Criteria) this;
        }

        public Criteria andTitleGreaterThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("title >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTitleLessThan(String value) {
            addCriterion("title <", value, "title");
            return (Criteria) this;
        }

        public Criteria andTitleLessThanColumn(GDataDto.Column column) {
            addCriterion("title < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTitleLessThanOrEqualTo(String value) {
            addCriterion("title <=", value, "title");
            return (Criteria) this;
        }

        public Criteria andTitleLessThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("title <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTitleLike(String value) {
            addCriterion("title like", value, "title");
            return (Criteria) this;
        }

        public Criteria andTitleNotLike(String value) {
            addCriterion("title not like", value, "title");
            return (Criteria) this;
        }

        public Criteria andTitleIn(List<String> values) {
            addCriterion("title in", values, "title");
            return (Criteria) this;
        }

        public Criteria andTitleNotIn(List<String> values) {
            addCriterion("title not in", values, "title");
            return (Criteria) this;
        }

        public Criteria andTitleBetween(String value1, String value2) {
            addCriterion("title between", value1, value2, "title");
            return (Criteria) this;
        }

        public Criteria andTitleNotBetween(String value1, String value2) {
            addCriterion("title not between", value1, value2, "title");
            return (Criteria) this;
        }

        public Criteria andAbstractIsNull() {
            addCriterion("abstract is null");
            return (Criteria) this;
        }

        public Criteria andAbstractIsNotNull() {
            addCriterion("abstract is not null");
            return (Criteria) this;
        }

        public Criteria andAbstractEqualTo(String value) {
            addCriterion("abstract =", value, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractEqualToColumn(GDataDto.Column column) {
            addCriterion("abstract = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andAbstractNotEqualTo(String value) {
            addCriterion("abstract <>", value, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractNotEqualToColumn(GDataDto.Column column) {
            addCriterion("abstract <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andAbstractGreaterThan(String value) {
            addCriterion("abstract >", value, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractGreaterThanColumn(GDataDto.Column column) {
            addCriterion("abstract > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andAbstractGreaterThanOrEqualTo(String value) {
            addCriterion("abstract >=", value, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractGreaterThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("abstract >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andAbstractLessThan(String value) {
            addCriterion("abstract <", value, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractLessThanColumn(GDataDto.Column column) {
            addCriterion("abstract < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andAbstractLessThanOrEqualTo(String value) {
            addCriterion("abstract <=", value, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractLessThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("abstract <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andAbstractLike(String value) {
            addCriterion("abstract like", value, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractNotLike(String value) {
            addCriterion("abstract not like", value, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractIn(List<String> values) {
            addCriterion("abstract in", values, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractNotIn(List<String> values) {
            addCriterion("abstract not in", values, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractBetween(String value1, String value2) {
            addCriterion("abstract between", value1, value2, "abstract");
            return (Criteria) this;
        }

        public Criteria andAbstractNotBetween(String value1, String value2) {
            addCriterion("abstract not between", value1, value2, "abstract");
            return (Criteria) this;
        }

        public Criteria andTypeIsNull() {
            addCriterion("`type` is null");
            return (Criteria) this;
        }

        public Criteria andTypeIsNotNull() {
            addCriterion("`type` is not null");
            return (Criteria) this;
        }

        public Criteria andTypeEqualTo(Short value) {
            addCriterion("`type` =", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeEqualToColumn(GDataDto.Column column) {
            addCriterion("`type` = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeNotEqualTo(Short value) {
            addCriterion("`type` <>", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotEqualToColumn(GDataDto.Column column) {
            addCriterion("`type` <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThan(Short value) {
            addCriterion("`type` >", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThanColumn(GDataDto.Column column) {
            addCriterion("`type` > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThanOrEqualTo(Short value) {
            addCriterion("`type` >=", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeGreaterThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("`type` >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeLessThan(Short value) {
            addCriterion("`type` <", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeLessThanColumn(GDataDto.Column column) {
            addCriterion("`type` < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeLessThanOrEqualTo(Short value) {
            addCriterion("`type` <=", value, "type");
            return (Criteria) this;
        }

        public Criteria andTypeLessThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("`type` <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andTypeIn(List<Short> values) {
            addCriterion("`type` in", values, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotIn(List<Short> values) {
            addCriterion("`type` not in", values, "type");
            return (Criteria) this;
        }

        public Criteria andTypeBetween(Short value1, Short value2) {
            addCriterion("`type` between", value1, value2, "type");
            return (Criteria) this;
        }

        public Criteria andTypeNotBetween(Short value1, Short value2) {
            addCriterion("`type` not between", value1, value2, "type");
            return (Criteria) this;
        }

        public Criteria andRuleIdIsNull() {
            addCriterion("rule_id is null");
            return (Criteria) this;
        }

        public Criteria andRuleIdIsNotNull() {
            addCriterion("rule_id is not null");
            return (Criteria) this;
        }

        public Criteria andRuleIdEqualTo(Integer value) {
            addCriterion("rule_id =", value, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdEqualToColumn(GDataDto.Column column) {
            addCriterion("rule_id = " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andRuleIdNotEqualTo(Integer value) {
            addCriterion("rule_id <>", value, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdNotEqualToColumn(GDataDto.Column column) {
            addCriterion("rule_id <> " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andRuleIdGreaterThan(Integer value) {
            addCriterion("rule_id >", value, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdGreaterThanColumn(GDataDto.Column column) {
            addCriterion("rule_id > " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andRuleIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("rule_id >=", value, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdGreaterThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("rule_id >= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andRuleIdLessThan(Integer value) {
            addCriterion("rule_id <", value, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdLessThanColumn(GDataDto.Column column) {
            addCriterion("rule_id < " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andRuleIdLessThanOrEqualTo(Integer value) {
            addCriterion("rule_id <=", value, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdLessThanOrEqualToColumn(GDataDto.Column column) {
            addCriterion("rule_id <= " + column.getEscapedColumnName());
            return (Criteria) this;
        }

        public Criteria andRuleIdIn(List<Integer> values) {
            addCriterion("rule_id in", values, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdNotIn(List<Integer> values) {
            addCriterion("rule_id not in", values, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdBetween(Integer value1, Integer value2) {
            addCriterion("rule_id between", value1, value2, "ruleId");
            return (Criteria) this;
        }

        public Criteria andRuleIdNotBetween(Integer value1, Integer value2) {
            addCriterion("rule_id not between", value1, value2, "ruleId");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table biz_data
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {
        /**
         * This field was generated by MyBatis Generator.
         * This field corresponds to the database table biz_data
         *
         * @mbg.generated
         */
        private GDataDtoExample example;

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table biz_data
         *
         * @mbg.generated
         */
        protected Criteria(GDataDtoExample example) {
            super();
            this.example = example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table biz_data
         *
         * @mbg.generated
         */
        public GDataDtoExample example() {
            return this.example;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table biz_data
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then) {
            if (condition) {
                then.criteria(this);
            }
            return this;
        }

        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table biz_data
         *
         * @mbg.generated
         */
        public Criteria when(boolean condition, ICriteriaWhen then, ICriteriaWhen otherwise) {
            if (condition) {
                then.criteria(this);
            } else {
                otherwise.criteria(this);
            }
            return this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table biz_data
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    static class SQLFilter {
        public static final String ESCAPE_START_STR = "$";

        public static final String ESCAPE_END_STR = "_";

        public static final java.util.Map<String, String> KEYWORDS;

        static {
            KEYWORDS = new java.util.HashMap<String, String>() {{
            put("mastor", "master");
            put("clr", "truncate");
            put("ins", "insert");
            put("sel", "select");
            put("del", "delete");
            put("upt", "update");
            put("def", "declare");
            put("alt", "alert");
            put("dpt", "drop");
        }};
        }

        protected static String sqlInject(String str) {
            if (isBlank(str)) {
            return null;
        }
        //去掉'|"|;|\字符
        str = str.replace("'", "");
        str = str.replace("\"", "");
        str = str.replace(";", "");
        str = str.replace("\\", "");
        //转换成小写
        str = str.toLowerCase();
        //判断是否包含非法字符
        java.util.Set<java.util.Map.Entry<String, String>> entries = KEYWORDS.entrySet();
        for (java.util.Map.Entry<String, String> entry : entries) {
            String keyword = entry.getValue();
            if (str.contains(keyword)) {
                throw new IllegalArgumentException("parameter \"" + str + "\"contains illegal characters:\"" + keyword + "\", please use escape characters:\"" + ESCAPE_START_STR + entry.getKey() + ESCAPE_END_STR + "\"");
            }
        }

        return str;
        }

        private static boolean isBlank(String str) {
            int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if ((!Character.isWhitespace(str.charAt(i)))) {
                return false;
            }
        }
        return true;
        }

        private static String escape(String str) {
            if (str == null || "".equals(str) || !str.contains(ESCAPE_START_STR) || !str.contains(ESCAPE_END_STR)) {
            return str;
        }
        java.util.Set<java.util.Map.Entry<String, String>> entries = KEYWORDS.entrySet();
        for (java.util.Map.Entry<String, String> entry : entries) {
            String esWord = entry.getKey();
            String realWord = entry.getValue();
            str = str.replace(ESCAPE_START_STR + esWord + ESCAPE_END_STR, realWord);
        }
        return str;
        }
    }

    public interface ICriteriaWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table biz_data
         *
         * @mbg.generated
         */
        void criteria(Criteria criteria);
    }

    public interface IExampleWhen {
        /**
         * This method was generated by MyBatis Generator.
         * This method corresponds to the database table biz_data
         *
         * @mbg.generated
         */
        void example(GDataDtoExample example);
    }
}